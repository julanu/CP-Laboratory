===============================================================================
1
Date: 20/12/2017 valid for all the problems
===============================================================================
/*
Author:  Jula  Marius
Description:    Determine  the  mean  value  of  the  negative/positive  elements  from  a  one
dimensional  array.
*/

#define  _CRT_SECURE_NO_WARNINGS

#include  <stdio.h>
#include  <conio.h>

#define  MAX  100

/*  prototypes  */
void  readElems(int  *, int);
void  meanVal(int  *, int);

void  main()
{
	int  n, arr[MAX], *pa;
	pa = arr;

	printf("\nDati  nr.  de  elem.:  ");
	scanf("%d", &n);

	readElems(pa, n);

	meanVal(pa, n);

	_getch();
}

/*  function  to  read  the  elements  of  an  array  with  a  number  of  elems  N*/
void  readElems(int  *arr, int  n)
{
	int  i, *pp;
	pp = arr;
	printf("\nPlease  enter  the  elems  of  the  array\n");
	for (i = 0; i < n; i++)
	{
		printf("arr[%d]:  ", i);
		scanf("%d", (pp+i));
	}

}

/*  function  to  determine  the  mean  value  of  the  elements  of  the  array  */
void  meanVal(int  *arr, int  n)
{
	float  sum, sum_neg;
	int  i, countNeg, countPos, *pt;
	
	countNeg = countPos = 0;
	sum = sum_neg = 0;

	pt = arr; // pointer

	//we check for the negative or positive elements so we can compute the mean values
	for (i = 0; i < n; i++)
		if (*(pt + i) > 0)
		{
			sum += *(pt + i);
			countPos++;
		}
		else
		{
			sum_neg += *(pt + i);
			countNeg++;
		}

	//checking to see if no positive or negative elems have been found, so we won't divide by zero
	if (countNeg == 0)
		countNeg = 1;
	if (countPos == 0)
		countPos = 1;

	printf("\nThe  mean  value  of  the  pos.  elems  is:  %.2f", sum / countPos);

	printf("\nThe  mean  value  of  the  neg.  elems  is:  %.2f", sum_neg / countNeg);
}

===============================================================================
2
===============================================================================
/*
Author:  Jula  Marius
Description:  Find  the  smallest  positive  elem.  of  the  array
*/

#define  _CRT_SECURE_NO_WARNINGS

#include  <stdio.h>
#include  <conio.h>

#define  MAX  20

/*  prototypes  */
int  detElem(int  *, int);
void  readElems(int  *, int);

void  main()
{
	int  n, arr[MAX], *pa;
	pa = arr;

	printf("Enter  the  number  of  elements:  ");
	scanf("%d", &n);

	readElems(pa, n);

	printf("\nThe  smallest  pos.  num.  is:  %d", detElem(pa, n));

	_getch();
}

/*  function  to  read  the  elements  of  an  array  with  a  number  of  elems  N*/
void  readElems(int  *arr, int  n)
{
	int  i, *pa;
	pa = arr;

	printf("\nPlease  enter  the  elems  of  the  array\n");
	for (i = 0; i < n; i++)
	{
		printf("arr[%d]:  ", i);
		scanf("%d", (pa + i));
	}

}
/*  function  to  determine  the  smallest  positive  number  from  an  array
we  first  search  for  the  first  positive  element  and  then  exit  the  for  loop
then  we  continue  the  search  */
int  detElem(int  *arr, int  n)
{
	int  i, nr, *pa;
	pa = arr;
	nr = 0;

	for (i = 0; i < n; i++)
	{
		if (*(pa + i) > 0)
			nr = *(pa + i);
		break;
	}

	for (i = 0; i < n; i++)
		if ((*(pa + i) < nr) && (*(pa + i) > 0))
			nr = *(pa + i);

	return  nr;
}
===============================================================================
3
===============================================================================

/*
Author:  Jula  Marius
Description:  Read  an  array  then  display  its  elements,  ordered
increasingly.
*/

#define  _CRT_SECURE_NO_WARNINGS

#include  <stdio.h>
#include  <conio.h>

#define  DIM  10

/*  prototypes  */
void  readElems(int  *);
void  displaySortArray(int  *);

void  main()
{
	int  arr[DIM], *pt;
	pt = &arr[0];
	readElems(pt);

	displaySortArray(pt);

	_getch();
}

void  readElems(int  *arr)
{
	int  i, *p;
	p = &arr[0];
	printf("\nGive  the  elements  of  the  array\n");
	for (i = 0; i < DIM; i++)
	{
		printf("arr[%d]=", i);
		scanf("%d", (p + i));
	}
}

/*  we  sort  the  array  increasingly  using  a  simple  sorthing  algorithm  with  the
efficiency  of  O(n^2)  that  gets  the  job  done,  instead  we  could  have  used  a
logarithmical  sorthing  algorithm  such  as  Merge  Sort*/
void  displaySortArray(int  *arr)
{
	int  i, j, *pt;
	pt = &arr[0];
	for (i = 0; i < DIM; i++)
		for (j = 0; j < DIM; j++)
			if (*(pt + i)  <  *(pt + j))
			{
				int  temp;
				temp = *(pt + i);
				*(pt + i) = *(pt + j);
				*(pt + j) = temp;
			}

	/* we display the array */
	for (i = 0; i < DIM; i++)
		printf("\t  %d", *(pt + i));

}
===============================================================================
4
===============================================================================
/*
Author:  Jula  Marius
	Description : Read  a  password  and  display  the  number
	of  trials  the  user  entered  wrong  passwords  until  he  entered  the  correct  one.
	*/

#define  _CRT_SECURE_NO_WARNINGS

#include  <stdio.h>
#include  <conio.h>
#include  <string.h>

#define  PASS  "sevenSamurai"
#define  DIM  255

	/*  after  reading  the  password(the  string  of  characters)  we  use
	the  strcmp  function  which  checks  if  two  strings  are  equal,
	if  so  the  function  will  return  the  value  0  */
void  main()
{
	char  pass2[DIM], *pc;
	int  count;
	pc = pass2;
	count = 0;

	do
	{
		printf("\nPlease  enter  the  password:  ");
		scanf("%s", pc);;  /*  reading  the  password  */
		count++;
		if (strcmp(pc, PASS) == 0)
		{        /*  we  display  the  password  count  -  1  times  because  we
				 count  also  the  time  we  enterred  correctly  the  password*/
			printf("The  password  has  been  entered  %d  time(s)", count - 1);
			_getch();
		}
		else
			printf("\nPlease  enter  the  password  correctly");

	} while (strcmp(pc, PASS) != 0);

	_getch();
}
===============================================================================
5
===============================================================================
/*
Author:  Jula  Marius
	Description : Read  the  name  and  surname  and  display  them  with  the  first  letter
	capitalized, separed  by  a  <tab>.
	*/

#define  _CRT_SECURE_NO_WARNINGS

#include  <stdio.h>
#include  <conio.h>
#include  <string.h>

#define  DIM    50

void  displayCapitalized(char  *, char  *);

void  main()
{
	char  name[DIM], surname[DIM], *pc_1, *pc_2;
	/* pc_x -- pointer to char*/
	pc_1 = name;
	pc_2 = surname;

	printf("\nPlease  enter  the  name:  ");
	scanf("%s", pc_1);

	printf("\nPlease  enter  the  surname:  ");
	scanf("%s", pc_2);

	displayCapitalized(pc_1, pc_2);

	_getch();
}

/*  we  use  the  strlen  to  loop  to  the  strings  of  characters
until  the  end,  then  we  check  if  every  character  is  minuscule  or  not
if  it  is,  we  capitalize  it,  and  at  the  end  we  display  the  name  and  surname*/
void  displayCapitalized(char  *name, char  *surname)
{
	int  i, n, m;
	char *p1, *p2;
	/* pointers to the arrays of characters */
	p1 = name;
	p2 = surname;
	/* the lengths of the name and the surname */
	n = strlen(p1);
	m = strlen(p2);

	for (i = 0; i < n; i++)
		if ((*(p1+i) >= 97) && (*(p1 + i) <= 122))
			*(p1 + i) -= 32;

	for (i = 0; i < m; i++)
		if ((*(p2 + i) >= 97) && (*(p2 + i) <= 122))
			*(p2 + i) -= 32;

	printf("\n\t%s\t\t%s", p1, p2);
}
===============================================================================
6
===============================================================================

/*
Author:  Jula  Marius
Description:    Define  two  matrices  of  int.  Write  the  functions  that  display:
a)  the  positions  of  the  odd  elements  in  each  matrix;
b)  the  sum  of  all  even  elements  in  both  matrices;
c)  the  sum  of  the  two  initial  matrices;
*/

#define  _CRT_SECURE_NO_WARNINGS

#include  <stdio.h>
#include  <conio.h>

#define  ROWS  50
#define  COLS  50

void  readMatrix(int *, int, int);
void  displayMatrix(int *, int, int);
void  oddPositions(int *, int, int);
int  detEvenSum(int *, int *, int, int);
void  sumMatrices(int *, int *, int, int);

void  main()
{
	int  mat1[ROWS][COLS], mat2[ROWS][COLS], n, m;
	printf("\nPlease  enter  the  number  of  rows:  ");
	scanf("%d", &n);
	printf("\nPlease  enter  the  number  of  cols:  ");
	scanf("%d", &m);

	int *pt1, *pt2;
	pt1 = &mat1[0][0];
	pt2 = &mat2[0][0];

	printf("\nGive  the  elems  of  the  first  matrix:  ");
	readMatrix(pt1, n, m);
	printf("\nGive  the  elems  of  the  second  matrix:  ");
	readMatrix(pt2, n, m);

	oddPositions(pt1, n, m);
	oddPositions(pt2, n, m);

	printf("\nThe  sum  of  all  even  nums  in  both  matrices  is: %d", detEvenSum(pt1, pt2, n, m));
	printf("\nThe  matrix  resulted  by  adding  both  matrices  is:  \n");
	sumMatrices(pt1, pt2, n, m);

	_getch();
}
/*  function  to  read  a  matrix  */
void  readMatrix(int  *mat, int  n, int  m)
{
	int  i, j, *pt1;
	pt1 = mat;
	for (i = 0; i < n; i++)
		for (j = 0; j < m; j++)
		{
			printf("\nmat[%d][%d]=", i, j);
			scanf("%d", (pt1 + i*n + j));
		}
}
/*  function  to  display  a  matrix  */
void  displayMatrix(int  *mat, int  n, int  m)
{
	int  i, j, *pt1;
	pt1 = mat;
	for (i = 0; i < n; i++)
	{
		for (j = 0; j < m; j++)
			printf("  %d  ", *(pt1 + i*n + j));
		printf("\n");
	}
}

/*  function  to  display  the  position  of  every  odd  element  in  the  matrix  */
void  oddPositions(int  *mat, int  n, int  m)
{
	printf("\nThe  positions  of  the  odd  elements  are:  \n");
	int  i, j, *pt1;
	pt1 = mat;
	for (i = 0; i < n; i++)
		for (j = 0; j < m; j++)
			if (*(pt1 + i*n + j) % 2 == 1)
				printf("(%d,  %d)  ", i, j);
}

/*  function  to  determine  the  sum  of  all  even  elements  of  two  matrices
i  will  use  only  2  for  loops  to  iterate  through  both  matrices  instead
of  using  4,  2  for  every  matrix  */
int  detEvenSum(int  *mat1, int  *mat2, int  n, int  m)
{
	int  i, j, sum, *pt1, *pt2;
	sum = 0;
	pt1 = mat1;
	pt2 = mat2;
	for (i = 0; i < n; i++)
		for (j = 0; j < m; j++)
		{
			if (*(pt1 + i*n + j) % 2 == 0)
				sum += *(pt1 + i*n + j);
			if (*(pt2 + i*n + j) % 2 == 0)
				sum += *(pt1 + i*n + j);
		}
	return  sum;
}

/*  we  compute  the  sum  of  the  two  matrices  in  the  first  matrix  by  simply  adding
the  elements  so  we  won't  use  an  extra  matrix  for  computing  */
void  sumMatrices(int  *mat1, int  *mat2, int  n, int  m)
{
	int  i, j, *pt1, *pt2;
	pt1 = mat1;
	pt2 = mat2;
	for (i = 0; i < n; i++)
		for (j = 0; j < m; j++)
			*(pt1 + i*n + j) += *(pt2 + i*n + j);
	printf("\n");
	displayMatrix(mat1, n, m);
}
===============================================================================
8
===============================================================================

/*
Author:  Jula  Marius
Description:  Function  to  determine  the  average  value  of  N  elements  from  a  one-dimensional  array  and  display  it.
Function  to  display  the  elements  from  the  initial  array  that  are  greater  than  the  computed  average.
*/

#define  _CRT_SECURE_NO_WARNINGS

#include  <stdio.h>
#include  <conio.h>

#define  DIM  100

void  readArr(int  *, int);
float  avgValue(int  *, int);
void  smallThanAvgVal(int  *, int, float);

void  main()
{
	int  arr[DIM], n, *mp;
	float  avg;
	mp = &arr[0];

	printf("\nGive  the  dimension  of  the  array:  ");
	scanf("%d", &n);

	readArr(mp, n);

	avg = avgValue(mp, n);
	printf("\nThe  average  value  of  the  elements  is:  %.2f", avg);
	smallThanAvgVal(mp, n, avg);

	_getch();
}

/*  function  to  read  a  one-dimensional  array  */
void  readArr(int  *tab, int  n)
{
	int  i, *p;
	p = &tab[0];
	printf("\nPlease  enter  the  elements  of  the  array:  \n");

	for (i = 0; i < n; i++)
	{
		printf("arr[%d]:  ", i);
		scanf("%d", (p + i));
	}
}

/*  function  to  determine  the  average  value  of  all  the  elements  of  the  array  */
float  avgValue(int  *tab, int  n)
{
	float  sum;
	int  i, *p;
	p = &tab[0];
	sum = 0;
	for (i = 0; i < n; i++)
		sum += *(p + i);

	sum /= n;
	return  sum;
}

void  smallThanAvgVal(int  *tab, int  n, float avg)
{
	int  i, *p;
	p = &tab[0];
	
	printf("\nThe  elements  smaller  than  the  average  are:\n");
	for (i = 0; i < n; i++)
		if (*(p + i) > avg)
			printf("%d  ", *(p + i));
}
===============================================================================
9
===============================================================================

/*
Author:  Jula  Marius
Description:  Write  a  program  that  reads  from  the  keyboard  n  integer  values  into  a  one-dimensional  array.  Display
the  number  of  negative  odd  elements  and  their  values
*/

#define  _CRT_SECURE_NO_WARNINGS

#include  <stdio.h>
#include  <conio.h>

#define  DIM  100

void  readArr(int  *, int  n);
void  negNums(int  *, int  n);

void  main(void)
{
	int  arr[DIM], n, *mp;
	mp = &arr[0];
	printf("\nPlease  enter  the  number  of  elements:  ");
	scanf("%d", &n);

	readArr(mp, n);
	negNums(mp, n);

	_getch();
}

/*  function  to  read  N  elements  and  store  them  into  an  array  */
void  readArr(int  *arr, int  n)
{
	int  i, *p;
	p = &arr[0];

	printf("\nPlease  enter  the  elements  of  the  array:  ");
	for (i = 0; i < n; i++)
	{
		printf("\narr[%d]=", i);
		scanf("%d", (p + i));
	}
}

/*  function  to  detect,  count  and  display  how  many  negative  numbers  are  in  the  array*/
void  negNums(int  *arr, int  n)
{
	int  i, count, *p;
	p = &arr[0];
	count = 0;
	printf("\nThe  negative  elements  from  the  array  are:  ");
	for (i = 0; i < n; i++)
		if (*(p+i)  <  0)
		{
			count++;
			printf("%d  ", *(p+i));
		}
	printf("\n  There  are  %d  negative  nums  in  the  array", count);
}
===============================================================================
10
===============================================================================

/*
Author:  Jula  Marius
Description:Write  a  program  that  reads  the  integer  elements  of  a  one  dimensional  array.  Implement  a  function
that  builds  another  array  containing  the  remainders  obtained  by  dividing  the  values  in  the  initial
array  to  the  number  of  the  positive  elements
*/

#define  _CRT_SECURE_NO_WARNINGS

#include  <stdio.h>
#include  <conio.h>

#define  DIM  100

void  readArr(int  *, int  n);
void  remaindersArr(int  *, int  *, int);
void dispArr(int *, int);

void  main()
{
	int  arr[DIM], arrNew[DIM], n, *mp, *mp2;
	/* mp  - my pointer */
	mp = &arr[0];
	mp2 = &arrNew[0];
	printf("Give  the  number  of  elements:  ");
	scanf("%d", &n);

	readArr(mp, n);

	remaindersArr(mp, mp2, n);

	dispArr(mp2, n);

	_getch();
}

/* function to display a one-dim array */
void dispArr(int *tab, int n)
{
	int i, *p;
	p = &tab[0];
	printf("\n");
	for (i = 0; i < n; i++)
		printf("\t%d", *(p + i));
}
/*  function  to  read  N  elements  and  store  them  into  an  array  */
void  readArr(int  *arr, int  n)
{
	int  i, *pt;
	pt = &arr[0];
	printf("\nPlease  enter  the  elements  of  the  array:  ");
	for (i = 0; i < n; i++)
	{
		printf("\narr[%d]=", i);
		scanf("%d", (pt + i));;
	}
}

/*  function  to  count  the  number  of  positive  elements  of  an  array
and  store  the  remainders  after  the  arithmetical  in  a  secondary  array
*/
void  remaindersArr(int  *arr, int  *arrNew, int  n)
{
	int    i, count, *pt, *pt_2;
	count = 0;
	pt = &arr[0];
	pt_2 = &arrNew[0];

	for (i = 0; i < n; i++)
		if (*(pt + i) > 0)
			count++;
	for (i = 0; i < n; i++)
		*(pt_2 + i) = *(pt + i) % count;
}
===============================================================================
11
===============================================================================

/*
Author:  Jula  Marius
Description:  Read  from  the  keyboard  an  array  of  characters.  Define  the  function  that  reverses  the  array  and
populates  another  array  with  the  elements  from  the  even  positions  of  the  reverted  array.  Display  the  results.
*/

#define  _CRT_SECURE_NO_WARNINGS

#include  <stdio.h>
#include  <conio.h>
#include  <string.h>

#define  DIM  50

void  reverse(char  *);
void  getNew(char  *, char  *);

void  main()
{
	/* pc_x - pointer to char */
	char  s1[DIM], s2[DIM], *pc_1, *pc_2;
	pc_1 = &s1[0];
	pc_2 = &s2[0];

	printf("Give  the  string:");
	scanf("%s", pc_1);  /*  read  the  array  of  characters*/

	reverse(pc_1);

	getNew(pc_1, pc_2);

	_getch();
}

/*  function  to  reverse  an  array  of  characters  and  then  display  it  */
void  reverse(char  *s1)
{
	int  i, n;
	char *pc;
	pc = &s1[0];
	n = strlen(s1);  /*  length  of  the  array  of  characters  */
	for (i = 0; i < n / 2; i++)
	{
		char  aux;
		aux = *(pc + i);
		*(pc + i) = *(pc + n - i - 1);
		*(pc + n - i - 1) = aux;
	}
	printf("\nThe  reversed  string  is:  ");
	printf("%s", pc);
}

/*  function  to  take  the  characters  from  the  odd  positions  and  store  them  in  a  second
string  to  be  displayed  */
void  getNew(char  *s1, char  *s2)
{
	int  i, j, n;
	char *pc1, *pc2;
	j = 0;
	n = strlen(s1);
	pc1 = &s1[0];
	pc2 = &s2[0];
	for (i = 0; i < n; i++)
		if (i % 2 == 0)
		{
			*(pc2 + j) = *(pc1 + i);
			j++;
		}

	*(pc2 + j) = '\0';  /*  the  second  array  of  characters  ends  on  this  position  */
	printf("\nThe  second  string  is:  ");
	printf("%s", pc2);
}
===============================================================================
12
===============================================================================
/*
Author:  Jula  Marius
Description:  Read  from  the  keyboard  the  elements  of  an  m  x  n  integer  matrix.
If  the  matrix  is  square,  display  the  elements  from  the  secondary  diagonal.  If  not,  print  the  sum  of  all
the  elements  from  a  certain  column,  c.
*/

#define  _CRT_SECURE_NO_WARNINGS

#include  <stdio.h>
#include  <conio.h>

#define  ROWS  25
#define  COLS  25

void  readMatrix(int *, int, int);
int  sumColumn(int *, int, int);
void  secondDiag(int *, int, int);

void  main(void)
{
	int  tab[ROWS][COLS], n, m, col, *pt;
	pt = &tab[0][0];
	printf("\nPlease  enter  the  dimensions  of  the  matrix:  ");
	scanf("%d%d", &n, &m);

	readMatrix(pt, n, m);

	if (n != m)
	{
		printf("\nPlease  enter  the  column:  ");
		scanf("%d", &col);
		printf("\nThe  sum  of  the  elems  of  the  column  %d  is  %d", col, sumColumn(pt, n, col));
	}
	else
		secondDiag(pt, n, m);

	_getch();
}

/*  function  to  read  an  NxM  matrix*/
void  readMatrix(int  *tab, int  n, int  m)
{
	int  i, j, *pt;
	pt = tab;
	printf("\nPlease  enter  the  elements  of  the  matrix:\n");
	for (i = 0; i < n; i++)
		for (j = 0; j < m; j++)
		{
			printf("tab[%d][%d]:  ", i, j);
			scanf("%d", (pt + i*n + j));
		}
}

/*  function  to  sum  all  the  elements  from  a  column  C*/
int  sumColumn(int  *tab, int  n, int  c)
{
	int  i, sum, *pt;
	sum = 0;
	pt = tab;
	for (i = 0; i < n; i++)
		sum += *(pt + i*n + c);

	return  sum;
}

void  secondDiag(int  *tab, int  n, int  m)
{
	int  i, j, *pt;
	pt = tab;
	printf("\nThe  elements  from  the  second  diagonal  are:  \n");

		for (j = 0; j < m; j++)
		{
			printf("%d  ", *(pt + j * m + (m - j - 1)));
		}
}

